services:
  postgres:
    image: postgres:14
    container_name: portfolio-postgres
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-postgres}
      POSTGRES_DB: ${POSTGRES_DB:-portfolio}
    volumes:
      - postgres-data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    restart: unless-stopped
    networks:
      - portfolio-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres} -d ${POSTGRES_DB:-portfolio} || exit 1"]
      interval: 5s
      timeout: 5s
      retries: 10
      start_period: 10s

  directus:
    image: directus/directus:latest
    container_name: portfolio-directus
    ports:
      - "8055:8055"
    environment:
      KEY: ${DIRECTUS_KEY:-dgedrrgfhdgsgsg}
      SECRET: ${DIRECTUS_SECRET:-ehrtyjegdzsargdrtgehgdgdger}
      ADMIN_EMAIL: ${DIRECTUS_ADMIN_EMAIL:-yousef.baitalmal@gmail.com}
      ADMIN_PASSWORD: ${DIRECTUS_ADMIN_PASSWORD:-applejuice}

      DB_CLIENT: pg
      DB_HOST: postgres
      DB_PORT: 5432
      DB_DATABASE: ${POSTGRES_DB:-portfolio}
      DB_USER: ${POSTGRES_USER:-postgres}
      DB_PASSWORD: ${POSTGRES_PASSWORD:-postgres}
      DB_POOL_ENABLED: 'true'
      DB_POOL_MIN: '1'
      DB_POOL_MAX: '15'

      PUBLIC_URL: ${DIRECTUS_PUBLIC_URL:-http://localhost:8055}

      # Explicit CORS Configuration
      CORS_ENABLED: 'true'
      CORS_ORIGIN: 'http://localhost:8080,http://localhost:8055,http://localhost:3000,http://127.0.0.1:8080,http://127.0.0.1:8055,http://127.0.0.1:3000'
      CORS_METHODS: 'GET,POST,PATCH,DELETE,OPTIONS,PUT,HEAD'
      CORS_ALLOWED_HEADERS: 'Content-Type,Authorization,X-Requested-With,Origin,Accept,Content-Range,Content-Disposition,Content-Length,Range,Access-Control-Allow-Origin,Access-Control-Allow-Credentials'
      CORS_EXPOSED_HEADERS: 'Content-Range,X-Total-Count,Content-Length,Content-Type,Content-Disposition,Authorization,Access-Control-Allow-Origin,Access-Control-Allow-Credentials'
      CORS_CREDENTIALS: 'true'
      CORS_MAX_AGE: '18000'
      CORS_PREFLIGHT_CONTINUE: 'true'
      LOG_LEVEL: 'info' # Changed from debug to reduce logs
      
      # Performance optimizations
      CACHE_ENABLED: 'true'
      CACHE_STORE: 'memory'
      CACHE_TTL: '600'
      
      # Security
      RATE_LIMITER_ENABLED: 'true'
      RATE_LIMITER_POINTS: 50
      RATE_LIMITER_DURATION: 1
      
    volumes:
      - directus-uploads:/directus/uploads
      - directus-data:/directus/data
    depends_on:
      postgres:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - portfolio-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8055/server/ping"]
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 30s

  frontend:
    build:
      context: .
      dockerfile: Dockerfile
      target: frontend-dev
    container_name: portfolio-frontend
    user: "1000:1000"  # Use UID 1000 directly
    environment:
      NODE_ENV: development
      VITE_API_URL: ${DIRECTUS_PUBLIC_URL:-http://localhost:8055}
      DIRECTUS_STATIC_TOKEN: ${DIRECTUS_STATIC_TOKEN:-}
      VITE_HMR_HOST: "0.0.0.0"
      HOST: "0.0.0.0"
      CHOKIDAR_USEPOLLING: "true"
      WATCHPACK_POLLING: "true"
      NODE_OPTIONS: --max-old-space-size=4096
      NEXT_TELEMETRY_DISABLED: 1
    ports:
      - "8080:8080"
    volumes:
      - ./frontend:/app/frontend:delegated
      - frontend-node-modules:/app/frontend/node_modules
      - frontend-next:/app/frontend/.next
      - frontend-vite:/app/frontend/node_modules/.vite
    working_dir: /app/frontend
    stdin_open: true
    tty: true
    depends_on:
      postgres:
        condition: service_healthy
      directus:
        condition: service_started
    restart: unless-stopped
    networks:
      - portfolio-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8080"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 40s

networks:
  portfolio-network:
    driver: bridge

volumes:
  postgres-data:
  directus-uploads:
  directus-data:
  frontend-node-modules:
  frontend-next:
  frontend-vite:
