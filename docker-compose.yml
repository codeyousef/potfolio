version: '3.8'

services:
  postgres:
    image: postgres:14
    container_name: portfolio-postgres
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-postgres}
      POSTGRES_DB: ${POSTGRES_DB:-portfolio}
      POSTGRES_MULTIPLE_DATABASES: ${POSTGRES_DB:-portfolio},test_portfolio
    volumes:
      - ./init-multiple-dbs.sh:/docker-entrypoint-initdb.d/init-multiple-dbs.sh
      - postgres-data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    restart: unless-stopped
    networks:
      - portfolio-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres} -d ${POSTGRES_DB:-portfolio} || exit 1"]
      interval: 5s
      timeout: 5s
      retries: 10
      start_period: 10s

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
      target: development
    container_name: portfolio-backend
    ports:
      - "8000:8000"
    environment:
      - DJANGO_DEBUG=True
      - DJANGO_SECRET_KEY=${DJANGO_SECRET_KEY:-django-insecure-default-key-for-dev}
      - DJANGO_ALLOWED_HOSTS=localhost,127.0.0.1,backend
      - CORS_ALLOWED_ORIGINS=http://localhost:3000,http://frontend:3000
      - POSTGRES_HOST=postgres
      - POSTGRES_PORT=5432
      - POSTGRES_DB=${POSTGRES_DB:-portfolio}
      - POSTGRES_USER=${POSTGRES_USER:-postgres}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-postgres}
      - TEST_MODE=${TEST_MODE:-false}
    volumes:
      - ./backend:/app
      - backend-media:/app/media
      - backend-static:/app/staticfiles
    depends_on:
      postgres:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8000/api/" ]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    networks:
      - portfolio-network
    command: >
      sh -c "python manage.py migrate &&
             python manage.py create_admin_user &&
             python manage.py create_placeholder_data &&
             python manage.py collectstatic --noinput &&
             python manage.py runserver 0.0.0.0:8000"

  frontend:
    build:
      context: .
      dockerfile: Dockerfile
      target: development
    container_name: portfolio-frontend
    environment:
      - NODE_ENV=development
      - PORT=3000
      - HOST=0.0.0.0
      - CHOKIDAR_USEPOLLING=true
      - WATCHPACK_POLLING=true
      - NODE_OPTIONS=--max-old-space-size=4096
      - NEXT_TELEMETRY_DISABLED=1
      - NEXT_PUBLIC_API_URL=http://localhost:8000/api
      - VITE_API_URL=http://localhost:8000/api
      - TEST_MODE=${TEST_MODE:-false}
    ports:
      - "3000:3000"
    volumes:
      - ./frontend:/app/frontend
      - /app/frontend/node_modules
      - /app/frontend/.next
    working_dir: /app/frontend
    stdin_open: true
    tty: true
    depends_on:
      postgres:
        condition: service_healthy
      backend:
        condition: service_started
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s

  tests:
    build:
      context: .
      dockerfile: Dockerfile
      target: development
    container_name: portfolio-tests
    environment:
      - TEST_MODE=true
      - NODE_ENV=test
      - NEXT_TELEMETRY_DISABLED=1
      - POSTGRES_HOST=postgres
      - POSTGRES_PORT=5432
      - POSTGRES_DB=test_portfolio
      - POSTGRES_USER=${POSTGRES_USER:-postgres}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-postgres}
    volumes:
      - ./backend:/app/backend
      - ./frontend:/app/frontend
      - /app/frontend/node_modules
    depends_on:
      postgres:
        condition: service_healthy
    profiles: [test]
    command: >
      sh -c "./run-all-tests.sh"

networks:
  portfolio-network:
    driver: bridge

volumes:
  postgres-data:
  backend-media:
  backend-static:
  frontend-node-modules:
  frontend-next:
  frontend-vite:
